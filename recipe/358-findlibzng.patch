From 440155b35b1bcd08ad98f5cbe51e50cf6e724d9b Mon Sep 17 00:00:00 2001
From: Mark Harfouche <mark.harfouche@gmail.com>
Date: Fri, 24 Sep 2021 10:56:36 -0400
Subject: [PATCH] Add patches to find zlibng correctly

---
 CMakeLists.txt          | 64 ++++++++++++++++++++---------------------
 bench/CMakeLists.txt    |  8 +++---
 blosc/CMakeLists.txt    | 20 ++++++-------
 blosc/blosc2.c          | 39 ++++++++++++++++++++++---
 cmake/FindZLIB_NG.cmake | 12 ++++++++
 tests/Makefile          | 12 ++++----
 6 files changed, 99 insertions(+), 56 deletions(-)
 create mode 100644 cmake/FindZLIB_NG.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index a472797c..71b6058b 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -21,14 +21,14 @@
 #       build a lite version (only with BloscLZ and LZ4/LZ4HC) of the blosc library
 #   DEACTIVATE_AVX2: default OFF
 #       do not attempt to build with AVX2 instructions
-#   DEACTIVATE_ZLIB: default OFF
+#   DEACTIVATE_ZLIB_NG: default OFF
 #       do not include support for the Zlib library
 #   DEACTIVATE_ZSTD: default OFF
 #       do not include support for the Zstd library
 #   PREFER_EXTERNAL_LZ4: default OFF
 #       when found, use the installed LZ4 libs instead of included
 #       sources
-#   PREFER_EXTERNAL_ZLIB: default OFF
+#   PREFER_EXTERNAL_ZLIB_NG: default OFF
 #       when found, use the installed ZLIB libs instead of included
 #       MINIZ sources
 #   PREFER_EXTERNAL_ZSTD: default OFF
@@ -106,16 +106,16 @@ option(BUILD_LITE
     "Build a lite version (only with BloscLZ and LZ4/LZ4HC) of the blosc library." OFF)
 option(DEACTIVATE_AVX2
     "Do not attempt to build with AVX2 instructions" OFF)
-option(DEACTIVATE_ZLIB
-    "Do not include support for the ZLIB library." OFF)
+option(DEACTIVATE_ZLIB_NG
+    "Do not include support for the ZLIB_NG library." OFF)
 option(DEACTIVATE_ZSTD
     "Do not include support for the ZSTD library." OFF)
 option(DEACTIVATE_IPP
     "Do not include support for the Intel IPP library." ON)
 option(PREFER_EXTERNAL_LZ4
     "Find and use external LZ4 library instead of included sources." OFF)
-option(PREFER_EXTERNAL_ZLIB
-    "Find and use external ZLIB library instead of included sources." OFF)
+option(PREFER_EXTERNAL_ZLIB_NG
+    "Find and use external ZLIB_NG library instead of included sources." OFF)
 option(PREFER_EXTERNAL_ZSTD
     "Find and use external ZSTD library instead of included sources." OFF)
 
@@ -138,7 +138,7 @@ if(BUILD_PLUGINS AND BUILD_LITE)
 endif()
 
 if(BUILD_LITE)
-    set(DEACTIVATE_ZLIB ON)
+    set(DEACTIVATE_ZLIB_NG ON)
     set(DEACTIVATE_ZSTD ON)
 endif()
 
@@ -148,36 +148,36 @@ else()
     message(STATUS "Using LZ4 internal sources.")
 endif()
 
-if(NOT DEACTIVATE_ZLIB)
-    # import the ZLIB_ROOT environment variable to help finding the zlib library
-    if(PREFER_EXTERNAL_ZLIB)
-        set(ZLIB_ROOT $ENV{ZLIB_ROOT})
-        find_package(ZLIB)
-        if(NOT ZLIB_FOUND)
+if(NOT DEACTIVATE_ZLIB_NG)
+    # import the ZLIB_NG_ROOT environment variable to help finding the zlib library
+    if(PREFER_EXTERNAL_ZLIB_NG)
+        set(ZLIB_NG_ROOT $ENV{ZLIB_NG_ROOT})
+        find_package(ZLIB_NG)
+        if(NOT ZLIB_NG_FOUND)
             message(STATUS "No ZLIB found.  Using ZLIB-NG internal sources.")
-            set(HAVE_ZLIB_NG TRUE)
         endif()
-    else()
-        message(STATUS "Using ZLIB-NG internal sources for ZLIB support.")
         set(HAVE_ZLIB_NG TRUE)
     endif()
-    # HAVE_ZLIB will be set to true because even if the library is not found,
-    # we will use the included sources for it
-    set(HAVE_ZLIB TRUE)
-endif()
 
-if(HAVE_ZLIB_NG)
-    set(ZLIB_NG_DIR "zlib-ng-2.0.5")  # update to the actual included version
-    add_definitions(-DZLIB_COMPAT)
-    set(ZLIB_COMPAT TRUE)
-    set(SKIP_INSTALL_ALL TRUE)
-    set(BUILD_SHARED_LIBS FALSE)
-    set(ZLIB_ENABLE_TESTS OFF)
-    add_subdirectory("internal-complibs/${ZLIB_NG_DIR}")
-
-    file(COPY
-            ${CMAKE_CURRENT_BINARY_DIR}/internal-complibs/${ZLIB_NG_DIR}/zconf.h
-            DESTINATION ${CMAKE_CURRENT_SOURCE_DIR}/internal-complibs/${ZLIB_NG_DIR}/)
+    if(NOT HAVE_ZLIB_NG)
+        message(STATUS "Using ZLIB-NG internal sources for ZLIB support.")
+
+        set(ZLIB_NG_DIR "zlib-ng-2.0.5")  # update to the actual included version
+        add_definitions(-DZLIB_COMPAT)
+        set(ZLIB_COMPAT TRUE)
+        set(SKIP_INSTALL_ALL TRUE)
+        set(BUILD_SHARED_LIBS FALSE)
+        set(ZLIB_ENABLE_TESTS OFF)
+        add_subdirectory("internal-complibs/${ZLIB_NG_DIR}")
+
+        file(COPY
+                ${CMAKE_CURRENT_BINARY_DIR}/internal-complibs/${ZLIB_NG_DIR}/zconf.h
+                DESTINATION ${CMAKE_CURRENT_SOURCE_DIR}/internal-complibs/${ZLIB_NG_DIR}/)
+
+        # HAVE_ZLIB will be set to true because even if the library is not found,
+        # we will use the included sources for it
+        set(HAVE_ZLIB_NG TRUE)
+    endif()
 endif()
 
 if(NOT DEACTIVATE_ZSTD)
diff --git a/bench/CMakeLists.txt b/bench/CMakeLists.txt
index 3d72c055..e906ae22 100644
--- a/bench/CMakeLists.txt
+++ b/bench/CMakeLists.txt
@@ -51,7 +51,7 @@ if(BUILD_TESTS)
         add_test(test_blosclz_shuffle_1 ${BENCH_EXE} blosclz ${SHUFFLE_1_OPTS})
         add_test(test_lz4_shuffle_1 ${BENCH_EXE} lz4 ${SHUFFLE_1_OPTS})
         # add_test(test_lz4hc_shuffle_1 ${BENCH_EXE} lz4hc ${SHUFFLE_1_OPTS})
-        if(HAVE_ZLIB)
+        if(HAVE_ZLIB_NG)
             # add_test(test_zlib_shuffle_1 ${BENCH_EXE} zlib ${SHUFFLE_1_OPTS})
         endif()
         if(HAVE_ZSTD)
@@ -65,7 +65,7 @@ if(BUILD_TESTS)
         add_test(test_blosclz_shuffle_n ${BENCH_EXE} blosclz ${SHUFFLE_N_OPTS})
         add_test(test_lz4_shuffle_n ${BENCH_EXE} lz4 ${SHUFFLE_N_OPTS})
         add_test(test_lz4hc_shuffle_n ${BENCH_EXE} lz4hc ${SHUFFLE_N_OPTS})
-        if(HAVE_ZLIB)
+        if(HAVE_ZLIB_NG)
             add_test(test_zlib_shuffle_n ${BENCH_EXE} zlib ${SHUFFLE_N_OPTS})
         endif()
         if(HAVE_ZSTD)
@@ -79,7 +79,7 @@ if(BUILD_TESTS)
         add_test(test_blosclz_bitshuffle_1 ${BENCH_EXE} blosclz ${BITSHUFFLE_1_OPTS})
         add_test(test_lz4_bitshuffle_1 ${BENCH_EXE} lz4 ${BITSHUFFLE_1_OPTS})
         # add_test(test_lz4hc_bitshuffle_1 ${BENCH_EXE} lz4hc ${BITSHUFFLE_1_OPTS})
-        if(HAVE_ZLIB)
+        if(HAVE_ZLIB_NG)
             # add_test(test_zlib_bitshuffle_1 ${BENCH_EXE} zlib ${BITSHUFFLE_1_OPTS})
         endif()
         if(HAVE_ZSTD)
@@ -93,7 +93,7 @@ if(BUILD_TESTS)
         add_test(test_blosclz_bitshuffle_n ${BENCH_EXE} blosclz ${BITSHUFFLE_N_OPTS})
         add_test(test_lz4_bitshuffle_n ${BENCH_EXE} lz4 ${BITSHUFFLE_N_OPTS})
         # add_test(test_lz4hc_bitshuffle_n ${BENCH_EXE} lz4hc ${BITSHUFFLE_N_OPTS})
-        if(HAVE_ZLIB)
+        if(HAVE_ZLIB_NG)
             # add_test(test_zlib_bitshuffle_n ${BENCH_EXE} zlib ${BITSHUFFLE_N_OPTS})
         endif()
         if(HAVE_ZSTD)
diff --git a/blosc/CMakeLists.txt b/blosc/CMakeLists.txt
index 1a7f0144..823d75ca 100644
--- a/blosc/CMakeLists.txt
+++ b/blosc/CMakeLists.txt
@@ -18,11 +18,11 @@ else()
 endif()
 
 if(NOT DEACTIVATE_ZLIB)
-    if(ZLIB_FOUND)
-        set(BLOSC_INCLUDE_DIRS ${BLOSC_INCLUDE_DIRS} ${ZLIB_INCLUDE_DIR})
+    if(ZLIB_NG_FOUND)
+        set(BLOSC_INCLUDE_DIRS ${BLOSC_INCLUDE_DIRS} ${ZLIB_NG_INCLUDE_DIR})
     else()
         set(ZLIB_LOCAL_DIR ${INTERNAL_LIBS}/${ZLIB_NG_DIR})
-        set(BLOSC_INCLUDE_DIRS ${BLOSC_INCLUDE_DIRS} ${ZLIB_LOCAL_DIR})
+        set(BLOSC_INCLUDE_DIRS ${BLOSC_INCLUDE_DIRS} ${ZLIB_NG_LOCAL_DIR})
     endif()
 endif()
 
@@ -96,14 +96,14 @@ else()
     source_group("LZ4" FILES ${LZ4_FILES})
 endif()
 
-if(NOT DEACTIVATE_ZLIB)
-    if(ZLIB_FOUND)
-        set(LIBS ${LIBS} ${ZLIB_LIBRARY})
+if(NOT DEACTIVATE_ZLIB_NG)
+    if(ZLIB_NG_FOUND)
+        set(LIBS ${LIBS} ${ZLIB_NG_LIBRARY})
     else()
-        set(ZLIB_LOCAL_DIR ${INTERNAL_LIBS}/${ZLIB_NG_DIR})
-        file(GLOB ZLIB_FILES ${ZLIB_LOCAL_DIR}/*.c)
-        set(SOURCES ${SOURCES} ${ZLIB_FILES})
-        source_group("Zlib" FILES ${ZLIB_FILES})
+        set(ZLIB_NG_LOCAL_DIR ${INTERNAL_LIBS}/${ZLIB_NG_DIR})
+        file(GLOB ZLIB_NG_FILES ${ZLIB_NG_LOCAL_DIR}/*.c)
+        set(SOURCES ${SOURCES} ${ZLIB_NG_FILES})
+        source_group("Zlib-ng" FILES ${ZLIB_NG_FILES})
     endif()
 endif()
 
diff --git a/blosc/blosc2.c b/blosc/blosc2.c
index e790e8e7..849182d4 100644
--- a/blosc/blosc2.c
+++ b/blosc/blosc2.c
@@ -43,7 +43,10 @@
   #include <ippdc.h>
 #endif
 #if defined(HAVE_ZLIB_NG)
-  #include "zlib.h"
+  #include "zlib-ng.h"
+#ifndef HAVE_ZLIB
+#define HAVE_ZLIB
+#endif
 #elif defined(HAVE_ZLIB)
   #include "zlib.h"
 #endif /*  HAVE_MINIZ */
@@ -423,7 +426,31 @@ static int lz4_wrap_decompress(const char* input, size_t compressed_length,
   return (int)maxout;
 }
 
-#if defined(HAVE_ZLIB)
+#if defined(HAVE_ZLIB_NG)
+static int zlib_wrap_compress(const char* input, size_t input_length,
+                              char* output, size_t maxout, int clevel) {
+  int status;
+  uLongf cl = (uLongf)maxout;
+  status = zng_compress2(
+      (Bytef*)output, &cl, (Bytef*)input, (uLong)input_length, clevel);
+  if (status != Z_OK) {
+    return 0;
+  }
+  return (int)cl;
+}
+
+static int zlib_wrap_decompress(const char* input, size_t compressed_length,
+                                char* output, size_t maxout) {
+  int status;
+  uLongf ul = (uLongf)maxout;
+  status = zng_uncompress(
+      (Bytef*)output, &ul, (Bytef*)input, (uLong)compressed_length);
+  if (status != Z_OK) {
+    return 0;
+  }
+  return (int)ul;
+}
+#elif defined(HAVE_ZLIB)
 /* zlib is not very respectful with sharing name space with others.
  Fortunately, its names do not collide with those already in blosc. */
 static int zlib_wrap_compress(const char* input, size_t input_length,
@@ -3220,11 +3247,15 @@ int blosc_get_complib_info(const char* compname, char** complib, char** version)
             LZ4_VERSION_MAJOR, LZ4_VERSION_MINOR, LZ4_VERSION_RELEASE);
     clibversion = sbuffer;
   }
-#if defined(HAVE_ZLIB)
+#if defined(HAVE_ZLIB_NG)
+  else if (clibcode == BLOSC_ZLIB_LIB) {
+    clibversion = ZLIBNG_VERSION;
+  }
+#elif defined(HAVE_ZLIB)
   else if (clibcode == BLOSC_ZLIB_LIB) {
     clibversion = ZLIB_VERSION;
   }
-#endif /* HAVE_ZLIB */
+#endif /* HAVE_ZLIB_NG or HAVE_ZLIB */
 #if defined(HAVE_ZSTD)
   else if (clibcode == BLOSC_ZSTD_LIB) {
     sprintf(sbuffer, "%d.%d.%d",
diff --git a/cmake/FindZLIB_NG.cmake b/cmake/FindZLIB_NG.cmake
new file mode 100644
index 00000000..dc4d7669
--- /dev/null
+++ b/cmake/FindZLIB_NG.cmake
@@ -0,0 +1,12 @@
+find_path(ZLIB_NG_INCLUDE_DIR zlib-ng.h)
+
+if(CMAKE_SYSTEM_NAME MATCHES "Windows")
+    find_library(ZLIB_NG_LIBRARY NAMES zlib-ng)
+else()
+    find_library(ZLIB_NG_LIBRARY NAMES z-ng)
+endif()
+
+if(ZLIB_NG_INCLUDE_DIR AND ZLIB_NG_LIBRARY)
+    set(ZLIB_NG_FOUND TRUE)
+    message(STATUS "Found ZLIB_NG library: ${ZLIB_NG_LIBRARY}")
+endif()
diff --git a/tests/Makefile b/tests/Makefile
index 7035ba12..011e0579 100644
--- a/tests/Makefile
+++ b/tests/Makefile
@@ -16,13 +16,13 @@ BLOSC_LIB += $(wildcard $(LZ4_DIR)/*.c)
 # Support for external LZ4 and LZ4HC
 #LDFLAGS += -llz4
 
-# Support for external Zlib
-LDFLAGS += -DHAVE_ZLIB -lz
+# Support for external Zlib-ng
+LDFLAGS += -DHAVE_ZLIB_NG -lz-ng
 
-# Support for internal Zlib
-#ZLIB_DIR = ../internal-complibs/zlib-1.2.8
-#CFLAGS += -DHAVE_ZLIB -I$(ZLIB_DIR)
-#BLOSC_LIB += $(wildcard $(ZLIB_DIR)/*.c)
+# Support for internal Zlib-ng
+#ZLIB_DIR = ../internal-complibs/zlib-ng-2.0.5
+#CFLAGS += -DHAVE_ZLIB_NG -I$(ZLIB_NG_DIR)
+#BLOSC_LIB += $(wildcard $(ZLIB_NG_DIR)/*.c)
 
 
 # Support for internal Zstd
